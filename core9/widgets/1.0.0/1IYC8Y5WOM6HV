angular.module('core9Dashboard.pagemodel', [
  'ui.router',
  'core9Dashboard.config',
  'core9Dashboard.menu'
]).config([
  '$stateProvider',
  function ($stateProvider) {
    $stateProvider.state('pagemodels', {
      url: '/config/pagemodels',
      views: {
        'main': {
          controller: 'PageModelsCtrl',
          templateUrl: 'pagemodel/pagemodels.tpl.html'
        }
      },
      data: {
        pageTitle: 'PageModels',
        sidebar: 'config',
        context: 'pagemodels'
      }
    }).state('pagemodel', {
      url: '/config/pagemodels/:id',
      views: {
        'main': {
          templateUrl: 'pagemodel/pagemodel.tpl.html',
          controller: 'PageModelsModelCtrl'
        }
      },
      data: {
        pageTitle: 'PageModels',
        sidebar: 'config',
        context: 'pagemodels'
      }
    });
  }
]).controller('PageModelsCtrl', [
  '$scope',
  '$http',
  '$state',
  'ConfigFactory',
  function ($scope, $http, $state, ConfigFactory) {
    $scope.pagemodelsFolder = '';
    function putPageModelInFolder(pagemodel, target) {
      var folderIndex = pagemodel.name.indexOf('/');
      if (folderIndex === -1) {
        if (target.pagemodels === undefined) {
          target.pagemodels = [];
        }
        target.pagemodels.push(pagemodel);
      } else {
        if (target.folders === undefined) {
          target.folders = {};
        }
        var folderName = '/' + pagemodel.name.substring(0, folderIndex);
        if (target.folders[folderName] === undefined) {
          target.folders[folderName] = {};
        }
        pagemodel.name = pagemodel.name.substring(folderIndex + 1);
        putPageModelInFolder(pagemodel, target.folders[folderName]);
      }
    }
    $scope.handlePageModelsData = function (data) {
      $scope.pagemodels = [];
      var l = data.length;
      for (var n = 0; n < l; n++) {
        putPageModelInFolder(data[n], $scope.pagemodels);
      }
      $scope.pagemodelList = $scope.pagemodels;
    };
    $scope.switchTo = function (folder) {
      if (folder === '..') {
        $scope.pagemodelsFolder = $scope.pagemodelsFolder.substring(0, $scope.pagemodelsFolder.lastIndexOf('/'));
      } else {
        $scope.pagemodelsFolder += folder;
      }
      if ($scope.pagemodelsFolder === '') {
        $scope.pagemodelList = $scope.pagemodels;
      } else {
        var folders = $scope.pagemodelsFolder.split('/');
        for (var n = 0; n < folders.length; n++) {
          if (folders[n] === '') {
            $scope.pagemodelList = $scope.pagemodels;
          } else {
            $scope.pagemodelList = $scope.pagemodelList.folders['/' + folders[n]];
          }
        }
      }
    };
    ConfigFactory.query({ configtype: 'pagemodel' }, $scope.handlePageModelsData);
    $scope.add = function (newName) {
      var model = new ConfigFactory({ configtype: 'pagemodel' });
      if ($scope.pagemodelsFolder === '' || $scope.pagemodelsFolder === '/') {
        model.name = newName;
      } else {
        model.name = $scope.pagemodelsFolder.substring(1) + '/' + newName;
      }
      model.$save(function (data) {
        $scope.pagemodels.push(data);
        $state.go('pagemodel', { id: data._id });
      });
    };
    $scope.refresh = function () {
      $http.post('/admin/pagemodel').success(function () {
        alert('All templates reloaded.');
      }).error(function (data) {
        $scope.$emit('$error', data.error);
      });
    };
    $scope.edit = function (pagemodel) {
      $state.go('pagemodel', { id: pagemodel._id });
    };
    $scope.remove = function (pagemodel) {
      pagemodel.$remove(function (data) {
        ConfigFactory.query({ configtype: 'pagemodel' }, $scope.handlePageModelsData);
        $scope.refresh();
      });
    };
  }
]).controller('PageModelsModelCtrl', [
  '$scope',
  '$http',
  'ConfigFactory',
  '$stateParams',
  function ($scope, $http, ConfigFactory, $stateParams) {
    $scope.pagemodel = ConfigFactory.get({
      configtype: 'pagemodel',
      id: $stateParams.id
    });
    $scope.$watch('pagemodel.name', function (newVal, oldVal) {
      if ($scope.pagemodel.templateName === undefined || $scope.pagemodel.templateName === oldVal) {
        $scope.pagemodel.templateName = $scope.pagemodel.name;
      }
    });
    $http.get('/admin/widget').success(function (data) {
      $scope.widgets = data;
      $scope.newComponent = {
        id: '',
        name: 'Select a new widget',
        globals: {}
      };
    });
    $scope.save = function () {
      $scope.pagemodel.$update(function () {
        $http.post('/admin/pagemodel').success(function () {
          alert('reloaded');
        }).error(function (data) {
          $scope.$emit('$error', data.error);
        });
      });
    };
    $scope.addComponent = function () {
      if ($scope.pagemodel.components === undefined) {
        $scope.pagemodel.components = [];
      }
      $scope.pagemodel.components.push($scope.newComponent);
      $scope.newComponent = {
        name: $scope.widgets[0],
        globals: {}
      };
    };
    $scope.removeComponent = function (index) {
      $scope.pagemodel.components.splice(index, 1);
    };
    $scope.addPermission = function (permission) {
      if ($scope.pagemodel.permissions === undefined) {
        $scope.pagemodel.permissions = [];
      }
      $scope.pagemodel.permissions.push(permission);
    };
    $scope.addRole = function (role) {
      if ($scope.pagemodel.roles === undefined) {
        $scope.pagemodel.roles = [];
      }
      $scope.pagemodel.roles.push(role);
    };
  }
]).run([
  'MenuService',
  function (MenuService) {
    MenuService.add('config', {
      title: 'PageModels',
      weight: 150,
      link: 'pagemodels'
    });
    MenuService.add('pagemodels', {
      title: 'Refresh',
      weight: 0,
      template: '<a href="" ng-controller="PageModelsCtrl" ng-click="refresh()">Refresh pagemodels</a>'
    });
  }
]);
;;angular.module('core9Dashboard.widgets', [
  'core9Dashboard.widget',
  'core9Dashboard.pagemodel',
  'templates-module-cms-widgets'
]);
;
angular.module('core9Dashboard.admin.dashboard').requires.push('core9Dashboard.widgets');;angular.module('templates-module-cms-widgets', [
  'pagemodel/pagemodel.tpl.html',
  'pagemodel/pagemodels.tpl.html',
  'widget/datahandler/Bundle.tpl.html',
  'widget/datahandler/Content.tpl.html',
  'widget/datahandler/Reference.tpl.html',
  'widget/widget.tpl.html',
  'widget/widgetlist.tpl.html'
]);
angular.module('pagemodel/pagemodel.tpl.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put('pagemodel/pagemodel.tpl.html', '<h1 class="page-header">PageModels {{model.name}}<small><i class="icon-double-angle-right"></i> manage your page models</small></h1>\n' + '<div class="form-group row">\n' + '  <label class="col-md-2 control-label">Name</label>  \n' + '  <div class="col-md-8">\n' + '    <input ng-model="pagemodel.name" type="text" class="form-control input-md" />\n' + '    <span class="help-block">A unique name for the pagemodel</span>\n' + '  </div>\n' + '</div>\n' + '<div class="form-group row">\n' + '  <label class="col-md-2 control-label">Template name</label>  \n' + '  <div class="col-md-8">\n' + '    <input ng-model="pagemodel.templateName" type="text" class="form-control input-md" />\n' + '    <span class="help-block">A unique name for the template</span>\n' + '  </div>\n' + '</div>\n' + '<div class="form-group row">\n' + '  <label class="col-md-2 control-label">Path</label>  \n' + '  <div class="col-md-8">\n' + '    <input ng-model="pagemodel.path" type="text" class="form-control input-md" />\n' + '    <span class="help-block">The path under which the pagemodel will be visible</span>\n' + '  </div>\n' + '</div>\n' + '<div class="form-group row">\n' + '  <label class="col-md-2 control-label">Permissions</label>  \n' + '  <div class="col-md-8">\n' + '    <table class="table table-striped">\n' + '      <tr>\n' + '        <th>Name</th>\n' + '        <th>Actions</th>\n' + '      </tr>\n' + '      <tr ng-repeat="permission in pagemodel.permissions">\n' + '        <td>{{permission}}</td>\n' + '        <td><button class="btn btn-danger" ng-click="pagemodel.permissions.splice($index, 1)"><i class="fa fa-trash-o"></i></button></td>\n' + '      </tr>\n' + '      <tr>\n' + '        <td><input ng-model="newPermission" type="text" class="form-control input-md" /></td>\n' + '        <td><button class="btn btn-success" ng-click="addPermission(newPermission)"><i class="fa fa-plus"></i></button></td>\n' + '      </tr>\n' + '    </table>\n' + '    <span class="help-block">The permissions which are allowed to view this page.</span>\n' + '  </div>\n' + '</div>\n' + '<div class="form-group row">\n' + '  <label class="col-md-2 control-label">Roles</label>  \n' + '  <div class="col-md-8">\n' + '    <table class="table table-striped">\n' + '      <tr>\n' + '        <th>Name</th>\n' + '        <th>Actions</th>\n' + '      </tr>\n' + '      <tr ng-repeat="role in pagemodel.roles">\n' + '        <td>{{role}}</td>\n' + '        <td><button class="btn btn-danger" ng-click="pagemodel.roles.splice($index, 1)"><i class="fa fa-trash-o"></i></button></td>\n' + '      </tr>\n' + '      <tr>\n' + '        <td><input ng-model="newRole" type="text" class="form-control input-md" /></td>\n' + '        <td><button class="btn btn-success" ng-click="addRole(newRole)"><i class="fa fa-plus"></i></button></td>\n' + '      </tr>\n' + '    </table>\n' + '    <span class="help-block">The roles which are allowed to view this page.</span>\n' + '  </div>\n' + '</div>\n' + '\n' + '<fieldset>\n' + '\t<legend>Components</legend>\n' + '  <div ng-repeat="component in pagemodel.components track by $index" class="form-group row">\n' + '    <label class="col-md-2 control-label">Widget</label>  \n' + '    <div class="col-md-8 input-group">\n' + '      <button type="button" class="form-control btn btn-default dropdown-toggle">{{component.name}}</button>\n' + '      <ul class="dropdown-menu selectbox">\n' + '        <li ng-repeat="(id, component) in widgets"><a ng-click="pagemodel.components[$parent.$index].name = component.name; pagemodel.components[$parent.$index].id = id">{{component.name}}</a></li>\n' + '      </ul>\n' + '      <span class="input-group-btn">\n' + '        <button class="btn btn-warning" ng-click="edit = !edit"><i class="fa fa-pencil"></i> Settings</button>\n' + '        <button class="btn btn-danger" ng-click="removeComponent($index)"><i class="fa fa-trash-o"></i> Remove</button>\n' + '      </span>\n' + '    </div>\n' + '\n' + '    <div class="col-md-8 col-md-offset-2 input-group" ng-if="edit">\n' + '      <fieldset>\n' + '        <legend>Widget settings</legend>\n' + '        <blockquote>If your widget has options, you can set them here</blockquote>\n' + '        <fieldset ng-if="widgets[component.id].datahandler.options !== null">\n' + '          <legend>Globals</legend>\n' + '          <div class="form-group" ng-repeat="(key, entry) in widgets[component.id].datahandler.options" ng-if="entry.global">\n' + '            <label class="col-md-2 control-label">{{key}}</label>\n' + '            <div class="col-md-8">\n' + '              <input type="text" class="form-control input-md" ng-model="component.globals[key]" />\n' + '            </div>\n' + '          </div>\n' + '          <div ng-repeat="bundle in widgets[component.id].datahandler.options.components">\n' + '            <div class="form-group" ng-repeat="(key, value) in bundle.globals" ng-if="value.substr(0,1) === \':\'">\n' + '              <label class="col-md-2 control-label">{{value.substr(1)}}</label>  \n' + '              <div class="col-md-8">\n' + '                <input type="text" class="form-control input-md" ng-model="component.globals[value.substr(1)]" />\n' + '              </div>\n' + '            </div>\n' + '          </div>\n' + '        </fieldset>\n' + '      </fieldset>\n' + '    </div>\n' + '  </div>\n' + '\n' + '  <div class="form-group row">\n' + '    <label class="col-md-2 control-label">Add component</label>\n' + '    <div class="col-md-8 input-group">\n' + '      <button type="button" class="form-control btn btn-default dropdown-toggle">{{newComponent.name}}</button>\n' + '      <ul class="dropdown-menu selectbox">\n' + '        <li ng-repeat="(id, component) in widgets"><a ng-click="newComponent.id = id; newComponent.name = component.name">{{component.name}}</a></li>\n' + '      </ul>\n' + '      <span class="input-group-btn">\n' + '        <button class="btn btn-success" ng-click="addComponent()">Add</button>\n' + '      </span>\n' + '    </div>\n' + '  </div>\n' + '</fieldset>\n' + '<fieldset>\n' + '  <legend>Actions</legend>\n' + '  <button class="btn btn-success" ng-click="save()">Save</button>\n' + '</fieldset>\n' + '</div>');
  }
]);
angular.module('pagemodel/pagemodels.tpl.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put('pagemodel/pagemodels.tpl.html', '<h1 class="page-header">PageModels<small><i class="icon-double-angle-right"></i> manage your page models</small></h1>\n' + '<blockquote>A pagemodel is a collection of components. The collection is visible on a specific path (with optional params).</blockquote>\n' + '<fieldset>\n' + '\t<legend>Pagemodels</legend>\n' + '\t<table class="table table-striped">\n' + '\t\t<tr>\n' + '\t\t\t<th>Name</th>\n' + '\t\t\t<th>Actions</th>\n' + '\t\t</tr>\n' + '    <tr ng-if="pagemodelsFolder !== \'\'">\n' + '      <td><a ng-click="switchTo(\'..\')"><i class="fa fa-folder-o"></i> ..</a></td>\n' + '      <td>\n' + '        <button class="btn btn-success" ng-click="switchTo(\'..\')"><i class="fa fa-folder-open-o"></i></button>\n' + '      </td>\n' + '    </tr>\n' + '    <tr ng-repeat="(folder, widgets) in pagemodelList.folders">\n' + '      <td><a ng-click="switchTo(folder)"><i class="fa fa-folder-o"></i> {{folder}}</a></td>\n' + '      <td>\n' + '        <button class="btn btn-success" ng-click="switchTo(folder)"><i class="fa fa-folder-open-o"></i></button>\n' + '      </td>\n' + '    </tr>\n' + '\t\t<tr ng-repeat="pagemodel in pagemodelList.pagemodels">\n' + '\t\t\t<td>{{pagemodel.name}}</td>\n' + '\t\t\t<td>\n' + '\t\t\t\t<button class="btn btn-success" ng-click="edit(pagemodel)"><i class="fa fa-pencil"></i></button>\n' + '\t\t\t\t<button class="btn btn-danger" ng-click="remove(pagemodel)"><i class="fa fa-trash-o"></i></button>\n' + '\t\t\t</td>\n' + '\t\t</tr>\n' + '    <tr>\n' + '      <td>\n' + '        <div class="form-group">\n' + '          <input ng-model="newName" type="text" placeholder="New pagemodel name" class="form-control input-md">\n' + '        </div>\n' + '      </td>\n' + '      <td>\n' + '        <button class="btn btn-success" ng-click="add(newName)"><i class="fa fa-plus"></i> New pagemodel</button>\n' + '      </td>\n' + '    </tr>\n' + '\t</table>\n' + '</fieldset>');
  }
]);
angular.module('widget/datahandler/Bundle.tpl.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put('widget/datahandler/Bundle.tpl.html', '<fieldset ng-controller="WidgetBundleController">\n' + '    <legend>Components</legend>\n' + '    <div ng-repeat="component in widget.handleroptions.components track by $index">\n' + '      <div class="form-group row">\n' + '        <label class="col-md-2 control-label">Widget</label>  \n' + '        <div class="col-md-8">\n' + '          <div class="input-group">\n' + '            <button type="button" class="form-control btn btn-default dropdown-toggle">{{component.name}}</button>\n' + '            <ul class="dropdown-menu selectbox">\n' + '              <li ng-repeat="(id, component) in widgets"><a ng-click="widget.handleroptions.components[$parent.$index].id = id; widget.handleroptions.components[$parent.$index].name = component.name">{{component.name}}</a></li>\n' + '            </ul>\n' + '            <span class="input-group-btn">\n' + '              <button class="btn btn-warning" ng-click="edit = !edit"><i class="fa fa-pencil"></i> Settings</button>\n' + '              <button class="btn btn-danger" ng-click="removeComponent($index)"><i class="fa fa-trash-o"></i> Remove</button>\n' + '            </span>\n' + '          </div>\n' + '        </div>\n' + '      </div>\n' + '\n' + '      <div class="col-md-8 col-md-offset-2 input-group" ng-if="edit">\n' + '        <fieldset>\n' + '          <legend>Widget settings ({{widgets[component.id].name}})</legend>\n' + '          <blockquote>If your widget has options, you can set them here</blockquote>\n' + '          <div class="row">\n' + '            <label class="col-md-3 control-label">Name</label>\n' + '              <div class="col-md-9">\n' + '              <div class="input-group">\n' + '                <input type="text" class="form-control input-md" ng-model="component.name" />\n' + '              </div>\n' + '            </div>\n' + '          </div>\n' + '          <fieldset ng-if="widgets[component.id].options !== null">\n' + '            <legend>Globals</legend>\n' + '            <div class="form-group" ng-repeat="(key, entry) in widgets[component.id].datahandler.options" ng-if="entry.global">\n' + '              <label class="col-md-2 control-label">{{key}}</label>\n' + '              <div class="col-md-8">\n' + '                <input type="text" class="form-control input-md" ng-model="component.globals[key]" />\n' + '              </div>\n' + '            </div>\n' + '            <div ng-repeat="bundle in widgets[component.name].options.components">\n' + '              <div class="form-group" ng-repeat="(key, value) in bundle.globals" ng-if="value.substr(0,1) === \':\'">\n' + '                <label class="col-md-2 control-label">{{value.substr(1)}}</label>  \n' + '                <div class="col-md-8">\n' + '                  <input type="text" class="form-control input-md" ng-model="component.globals[value.substr(1)]" />\n' + '                </div>\n' + '              </div>\n' + '            </div>\n' + '          </fieldset>\n' + '        </fieldset>\n' + '      </div>\n' + '    </div>\n' + '\n' + '    <div class="col-md-8 col-md-offset-2 input-group">\n' + '      <div class="row">\n' + '        <label class="col-md-3 control-label">Add component</label>\n' + '        <div class="col-md-9">\n' + '          <div class="input-group">\n' + '            <button type="button" class="form-control btn btn-default dropdown-toggle">{{newComponent.name}}</button>\n' + '            <ul class="dropdown-menu selectbox">\n' + '             <li ng-repeat="(id, component) in widgets"><a ng-click="newComponent.id = id; newComponent.name = component.name">{{component.name}}</a></li>\n' + '           </ul>\n' + '           <span class="input-group-btn">\n' + '             <button class="btn btn-success" ng-click="addComponent()">Add</button>\n' + '           </span>\n' + '         </div>\n' + '       </div>\n' + '     </div>\n' + '   </div>\n' + ' </fieldset>');
  }
]);
angular.module('widget/datahandler/Content.tpl.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put('widget/datahandler/Content.tpl.html', '<div ng-controller="WidgetContentController">\n' + '  <fieldset>\n' + '    <legend>Content selection</legend>\n' + '    <p class="lead">Enter the field (and value) for the query of the content. You can use a Global value, which means the value will be set at a higher level (e.g. pagemodel or widgetbundle).</p>\n' + '    <h4>Params:</h4>\n' + '    <dl>\n' + '      <dt>content</dt>\n' + '      <dd>The content item</dd>\n' + '    </dl>\n' + '    <div class="form-group row">\n' + '      <label class="col-md-2 control-label">ContentType</label>\n' + '      <div class="col-md-8">\n' + '        <select ng-options="contenttype as contenttype.name for contenttype in contenttypes" ng-model="contenttype" class="form-control input-md"></select>\n' + '      </div>\n' + '    </div>\n' + '    <div class="form-group row">\n' + '      <label class="col-md-2 control-label">Field</label>\n' + '      <div class="col-md-8">\n' + '        <div class="input-group">\n' + '          <span class="input-group-addon"><input type="checkbox" ng-model="manual" /> Manual</span>\n' + '          <select ng-if="!manual" ng-options="key as key for (key,field) in contenttype.schema.properties" ng-model="widget.handleroptions.fieldName" class="form-control input-md">\n' + '            <option value="">Database ID</option>\n' + '          </select>\n' + '          <input type="text" ng-if="manual" class="form-control" ng-model="widget.handleroptions.fieldName" />\n' + '        </div>\n' + '      </div>\n' + '    </div>\n' + '    <div class="form-group row">\n' + '      <label class="col-md-2 control-label">Value</label>\n' + '      <div class="col-md-8">\n' + '        <div class="input-group">\n' + '          <span class="input-group-addon"><input type="checkbox" ng-model="widget.handleroptions.id.global" /> Global</span>\n' + '          <input type="text" ng-disabled="widget.handleroptions.id.global" class="form-control" ng-model="widget.handleroptions.id.value" />\n' + '        </div>\n' + '      </div>\n' + '    </div>\n' + '    <div class="form-group row">\n' + '      <label class="col-md-2 control-label">Quantity</label>\n' + '      <div class="col-md-8">\n' + '        <input type="checkbox" ng-model="widget.handleroptions.multipleResults" /> Allow multiple results\n' + '      </div>\n' + '    </div>\n' + '  </fieldset>\n' + '  <fieldset>\n' + '    <legend>Custom field mappings</legend>\n' + '    <p class="lead">Enter your custom field mappings. These mappings are available as variables in the request. This means you can use them across widgets.</p>\n' + '    <div class="form-group row">\n' + '      <label class="col-md-2 control-label">Fields</label>\n' + '      <div class="col-md-8">\n' + '        <table class="table table-striped">\n' + '          <tr>\n' + '            <th class="col-md-5">Variable name</th>\n' + '            <th class="col-md-6">Variable value</th>\n' + '            <th class="col-md-1">Actions</th>\n' + '          </tr>\n' + '          <tr ng-repeat="variable in widget.handleroptions.customVariables">\n' + '            <td>\n' + '              <input type="text" ng-model="variable.key" class="form-control" />\n' + '            </td>\n' + '            <td>\n' + '              <div class="input-group">\n' + '                <span class="input-group-addon"><input type="checkbox" ng-model="variable.manual" /> Manual</span>\n' + '                <select ng-if="!variable.manual" ng-options="key as key for (key,field) in contenttype.schema.properties" ng-model="variable.value" class="form-control">\n' + '                  <option value="">Database ID</option>\n' + '                </select>\n' + '                <input ng-if="variable.manual" type="text" ng-model="variable" class="form-control" />\n' + '              </div>\n' + '            </td>\n' + '            <th><button class="btn btn-danger" ng-click="widget.handleroptions.customVariables.splice($index, 1)"><i class="fa fa-trash-o"></i></button></th>\n' + '          </tr>\n' + '          <tr>\n' + '            <td><input type="text" class="form-control" ng-model="newCustomVariableName" /></td>\n' + '            <td><button class="btn btn-success" ng-click="addCustomVariable()">Add custom variable</button></td>\n' + '          </tr>\n' + '        </table>\n' + '      </div>\n' + '    </div>\n' + '  </fieldset>\n' + '</div>');
  }
]);
angular.module('widget/datahandler/Reference.tpl.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put('widget/datahandler/Reference.tpl.html', '<div ng-controller="WidgetContentController">\n' + '  <div ng-controller="ReferenceContentController">\n' + '    <fieldset>\n' + '      <legend>Content selection</legend>\n' + '      <p class="lead">Enter the field (and value) for the query of the content. You can use a Global value, which means the value will be set at a higher level (e.g. pagemodel or widgetbundel). </p>\n' + '      <h4>Params:</h4>\n' + '      <dl>\n' + '        <dt>content</dt>\n' + '        <dd>the content which is referenced</dd>\n' + '        <dt>contents</dt>\n' + '        <dd>the referencing content</dd>\n' + '        <dt>pager</dt>\n' + '        <dd>a pager which will paginate your referencing items</dd>\n' + '      </dl>\n' + '      <div class="form-group row">\n' + '        <label class="col-md-2 control-label">ContentType</label>\n' + '        <div class="col-md-8">\n' + '          <select ng-options="contenttype as contenttype.name for contenttype in contenttypes" ng-model="contenttype" class="form-control input-md"></select>\n' + '          <span class="help">The content type which contains the 1-to-many reference (the one).</span>\n' + '        </div>\n' + '      </div>\n' + '      <div class="form-group row">\n' + '        <label class="col-md-2 control-label">Content Query Field</label>\n' + '        <div class="col-md-8">\n' + '          <select ng-options="key as key for (key,field) in contenttype.schema.properties" ng-model="widget.handleroptions.fieldName" class="form-control input-md">\n' + '            <option value="">Database ID</option>\n' + '          </select>\n' + '          <span class="help">The field which is used to query the content.</span>\n' + '        </div>\n' + '      </div>\n' + '      <div class="form-group row">\n' + '        <label class="col-md-2 control-label">Content Query Value</label>\n' + '        <div class="col-md-8">\n' + '          <div class="input-group">\n' + '            <span class="input-group-addon"><input type="checkbox" ng-model="widget.handleroptions.id.global" /> Global</span>\n' + '            <input type="text" ng-disabled="widget.handleroptions.id.global" class="form-control" ng-model="widget.handleroptions.id.value" />\n' + '          </div>\n' + '          <span class="help">The value which should be used.</span>\n' + '        </div>\n' + '      </div>\n' + '      <div class="form-group row">\n' + '        <label class="col-md-2 control-label">Referenced ContentType</label>\n' + '        <div class="col-md-8">\n' + '          <select ng-options="contenttype as contenttype.name for contenttype in contenttypes" ng-model="referenced" class="form-control input-md"></select>\n' + '          <span class="help">The content type which is referenced to (the many).</span>\n' + '        </div>\n' + '      </div>\n' + '      <div class="form-group row">\n' + '        <label class="col-md-2 control-label">Reference field</label>\n' + '        <div class="col-md-8">\n' + '          <select ng-options="key as key for (key,field) in contenttype.schema.properties" ng-model="widget.handleroptions.referencingField" class="form-control input-md">\n' + '          </select>\n' + '          <span class="help">The field which is referencing to the content.</span>\n' + '        </div>\n' + '      </div>\n' + '      <div class="form-group row">\n' + '        <label class="col-md-2 control-label">Results per page</label>\n' + '        <div class="col-md-8">\n' + '          <input type="number" ng-model="widget.handleroptions.resultsPerPage" class="form-control input-md"/>\n' + '          <span class="help">The number of items, or 0 for all.</span>\n' + '        </div>\n' + '      </div>\n' + '    </fieldset>\n' + '    <fieldset>\n' + '    <legend>Custom field mappings</legend>\n' + '    <p class="lead">Enter your custom field mappings. These mappings are available as variables in the request. This means you can use them across widgets.</p>\n' + '    <div class="form-group row">\n' + '      <label class="col-md-2 control-label">Fields</label>\n' + '      <div class="col-md-8">\n' + '        <table class="table table-striped">\n' + '          <tr>\n' + '            <th class="col-md-5">Variable name</th>\n' + '            <th class="col-md-6">Variable value</th>\n' + '            <th class="col-md-1">Actions</th>\n' + '          </tr>\n' + '          <tr ng-repeat="variable in widget.handleroptions.customVariables">\n' + '            <td>\n' + '              <input type="text" ng-model="variable.key" class="form-control" />\n' + '            </td>\n' + '            <td>\n' + '              <div class="input-group">\n' + '                <span class="input-group-addon"><input type="checkbox" ng-model="variable.manual" /> Manual</span>\n' + '                <select ng-if="!variable.manual" ng-options="key as key for (key,field) in contenttype.schema.properties" ng-model="variable.value" class="form-control">\n' + '                  <option value="">Database ID</option>\n' + '                </select>\n' + '                <input ng-if="variable.manual" type="text" ng-model="variable" class="form-control" />\n' + '              </div>\n' + '            </td>\n' + '            <th><button class="btn btn-danger" ng-click="widget.handleroptions.customVariables.splice($index, 1)"><i class="fa fa-trash-o"></i></button></th>\n' + '          </tr>\n' + '          <tr>\n' + '            <td><input type="text" class="form-control" ng-model="newCustomVariableName" /></td>\n' + '            <td><button class="btn btn-success" ng-click="addCustomVariable()">Add custom variable</button></td>\n' + '          </tr>\n' + '        </table>\n' + '      </div>\n' + '    </div>\n' + '  </fieldset>\n' + '  </div>\n' + '</div>');
  }
]);
angular.module('widget/widget.tpl.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put('widget/widget.tpl.html', '<h1 class="page-header">Widget {{widget.name}}<small><i class="icon-double-angle-right"></i> manage your widgets</small></h1>\n' + '<div class="form-group row">\n' + '  <label class="col-md-2 control-label">Name</label>  \n' + '  <div class="col-md-8">\n' + '    <input ng-model="widget.name" type="text" class="form-control input-md" />\n' + '    <span class="help-block">A unique name for the widget (use \'/\' to separate foldernames)</span>\n' + '  </div>\n' + '</div>\n' + '<div class="form-group row">\n' + '  <label class="col-md-2 control-label">Template name</label>  \n' + '  <div class="col-md-8">\n' + '    <input ng-model="widget.templateName" type="text" class="form-control input-md" />\n' + '    <span class="help-block">The entry template for the widget</span>\n' + '  </div>\n' + '</div>\n' + '<div class="form-group row">\n' + '  <label class="col-md-2 control-label">Template</label>  \n' + '  <div class="col-md-8">\n' + '    <div ui-codemirror="editorOptions" name="template" ng-model="widget.template">{{widget.template}}</div>\n' + '  </div>\n' + '</div>\n' + '<div class="form-group row">\n' + '  <label class="col-md-2 control-label">Editor options</label>  \n' + '  <div class="col-md-8">\n' + '    <button type="button" class="btn btn-success" ng-click="editorOptions.fullScreen = true">Fullscreen</button>\n' + '    <button type="button" class="btn btn-warning" ng-click="generateBoilerplate()">Boilerplate</button>\n' + '  </div>\n' + '</div>\n' + '\n' + '<fieldset>\n' + '\t<legend>Datahandler</legend>\n' + '  <div class="form-group row">\n' + '    <label class="col-md-2 control-label">Datahandler</label>  \n' + '    <div class="col-md-8">\n' + '      <button type="button" class="btn btn-default form-control dropdown-toggle">{{widget.handler}}<span class="caret"></span></button>\n' + '      <ul class="dropdown-menu selectbox">\n' + '        <li ng-repeat="handler in datahandlers"><a ng-click="widget.handler = handler">{{handler}}</a></li>\n' + '      </ul>\n' + '    </div>\n' + '  </div>\n' + '  <div cn-datahandler-form cn-widget="widget" />\n' + '</fieldset>\n' + '\n' + '\n' + '<fieldset>\n' + '  <legend>Actions</legend>\n' + '  <button class="btn btn-success" ng-click="save()">Save</button>\n' + '</fieldset>\n' + '<div class="close-fullscreen clearfix" ng-show="editorOptions.fullScreen === true">\n' + '  <button type="button" class="btn btn-success" ng-click="save()">Save</button>\n' + '  <button type="button" class="btn btn-danger" ng-click="editorOptions.fullScreen = false;">&times;</button>\n' + '</div>\n' + '</div>');
  }
]);
angular.module('widget/widgetlist.tpl.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put('widget/widgetlist.tpl.html', '<h1 class="page-header">Widgets<small><i class="icon-double-angle-right"></i> manage your widgets</small></h1>\n' + '<blockquote>A widget is a reusable component of the website</blockquote>\n' + '<fieldset>\n' + '  <legend>Widgets</legend>\n' + '  <table class="table table-striped">\n' + '    <tr>\n' + '      <th>Name</th>\n' + '      <th>Actions</th>\n' + '    </tr>\n' + '    <tr ng-if="widgetFolder !== \'\'">\n' + '      <td><a ng-click="switchTo(\'..\')"><i class="fa fa-folder-o"></i> ..</a></td>\n' + '      <td>\n' + '        <button class="btn btn-success" ng-click="switchTo(\'..\')"><i class="fa fa-folder-open-o"></i></button>\n' + '      </td>\n' + '    </tr>\n' + '    <tr ng-repeat="(folder, widgets) in widgetList.folders">\n' + '      <td><a ng-click="switchTo(folder)"><i class="fa fa-folder-o"></i> {{folder}}</a></td>\n' + '      <td>\n' + '        <button class="btn btn-success" ng-click="switchTo(folder)"><i class="fa fa-folder-open-o"></i></button>\n' + '      </td>\n' + '    </tr>\n' + '    <tr ng-repeat="widget in widgetList.widgets">\n' + '      <td>{{widget.name}}</td>\n' + '      <td>\n' + '        <button class="btn btn-success" ng-click="edit(widget)"><i class="fa fa-pencil"></i></button>\n' + '        <button class="btn btn-danger" ng-click="remove(widget)"><i class="fa fa-trash-o"></i></button>\n' + '      </td>\n' + '    </tr>\n' + '    <tr>\n' + '      <td>\n' + '        <div class="form-group">\n' + '          <input ng-model="newName" type="text" placeholder="New widget name" class="form-control input-md">\n' + '        </div>\n' + '      </td>\n' + '      <td>\n' + '        <button class="btn btn-success" ng-click="add(newName)"><i class="fa fa-plus"></i> New widget</button>\n' + '      </td>\n' + '    </tr>\n' + '  </table>\n' + '</fieldset>');
  }
]);;angular.module('core9Dashboard.widget.datahandlers', ['core9Dashboard.config']).factory('DataHandlers', [
  '$q',
  '$http',
  function ($q, $http) {
    var templates = {};
    var datahandlers = [];
    var handlerschemas = {};
    this.registerTemplateOnHandler = function (handlerName, templatePath) {
      templates[handlerName] = templatePath;
    };
    this.getTemplate = function (handlerName) {
      return templates[handlerName];
    };
    this.retrieveDataHandlers = function () {
      var deferred = $q.defer();
      if (datahandlers.length > 0) {
        deferred.resolve(datahandlers);
      } else {
        $http.get('/admin/widget/datahandler').success(function (data) {
          datahandlers = data;
          deferred.resolve(datahandlers);
        });
      }
      return deferred.promise;
    };
    this.retrieveHandlerSchema = function (handlerName) {
      var deferred = $q.defer();
      if (handlerschemas[handlerName] !== undefined) {
        deferred.resolve(handlerschemas[handlerName]);
      } else {
        $http.get('/admin/widget/datahandler/' + handlerName).success(function (data) {
          handlerschemas[handlerName] = data;
          deferred.resolve(handlerschemas[handlerName]);
        });
      }
      return deferred.promise;
    };
    return this;
  }
]).directive('cnDatahandlerForm', [
  '$compile',
  '$templateCache',
  'DataHandlers',
  function ($compile, $templateCache, DataHandlers) {
    return {
      replace: true,
      scope: { widget: '=cnWidget' },
      link: function (scope, element, attrs) {
        scope.$watch('widget.handler', function () {
          if (scope.widget.handler !== undefined) {
            var template = DataHandlers.getTemplate(scope.widget.handler);
            if (template === undefined) {
              DataHandlers.retrieveHandlerSchema(scope.widget.handler).then(function (data) {
                if (data.schema === null) {
                  scope.schema = {};
                } else {
                  scope.schema = data.schema;
                }
                if (data.options === null) {
                  scope.schemaOptions = {};
                } else {
                  scope.schemaOptions = data.options;
                }
                element.html('<div cn-schema-generator cn-schema="schema" cn-options="schemaOptions" cn-data="widget.handleroptions"></div>');
                $compile(element.contents())(scope);
              });
            } else {
              element.html($templateCache.get(template));
              $compile(element.contents())(scope);
            }
          }
        });
      }
    };
  }
]).controller('WidgetBundleController', [
  '$scope',
  '$http',
  function ($scope, $http) {
    $scope.addComponent = function () {
      if ($scope.widget.handleroptions.components === undefined) {
        $scope.widget.handleroptions.components = [];
      }
      $scope.widget.handleroptions.components.push($scope.newComponent);
      $scope.newComponent = {
        id: '',
        name: 'Select a new component',
        globals: {}
      };
    };
    $scope.removeComponent = function (index) {
      $scope.widget.handleroptions.components.splice(index, 1);
    };
    $http.get('/admin/widget').success(function (data) {
      $scope.widgets = data;
      $scope.newComponent = {
        id: '',
        name: 'Select a new component',
        globals: {}
      };
    });
  }
]).controller('WidgetContentController', [
  '$scope',
  'ConfigFactory',
  function ($scope, ConfigFactory) {
    $scope.contenttypes = ConfigFactory.query({ configtype: 'content' }, function (data) {
      if ($scope.widget.handleroptions.contentType !== undefined) {
        for (var i = data.length - 1; i >= 0; i--) {
          if (data[i].name === $scope.widget.handleroptions.contentType) {
            $scope.contenttype = data[i];
            if ($scope.contenttype.schema.properties[$scope.widget.handleroptions.field] === undefined) {
              $scope.manual = true;
            }
          }
        }
      }
    });
    $scope.addCustomVariable = function () {
      if ($scope.widget.handleroptions.customVariables === undefined) {
        $scope.widget.handleroptions.customVariables = [];
      }
      $scope.widget.handleroptions.customVariables.push({
        key: $scope.newCustomVariableName,
        manual: false
      });
      $scope.newCustomVariableName = '';
    };
    $scope.$watch('contenttype', function () {
      if ($scope.contenttype !== undefined && $scope.contenttype.name !== $scope.widget.handleroptions.contentType) {
        $scope.widget.handleroptions.contentType = $scope.contenttype.name;
      }
    });
  }
]).controller('ReferenceContentController', [
  '$scope',
  function ($scope) {
    $scope.$parent.$watch('contenttypes', function (data) {
      for (var i = $scope.contenttypes.length - 1; i >= 0; i--) {
        if ($scope.contenttypes[i].name === $scope.widget.handleroptions.referencedContentType) {
          $scope.referenced = $scope.contenttypes[i];
        }
      }
    }, true);
    $scope.addCustomVariable = function () {
      if ($scope.widget.handleroptions.customVariables === undefined) {
        $scope.widget.handleroptions.customVariables = [];
      }
      $scope.widget.handleroptions.customVariables.push({
        key: $scope.newCustomVariableName,
        manual: false
      });
      $scope.newCustomVariableName = '';
    };
    $scope.$watch('contenttype', function () {
      if ($scope.contenttype !== undefined && $scope.contenttype.name !== $scope.widget.handleroptions.contentType) {
        $scope.widget.handleroptions.contentType = $scope.contenttype.name;
      }
    });
    $scope.$watch('referenced', function () {
      if ($scope.referenced !== undefined && $scope.referenced.name !== $scope.widget.handleroptions.referencedContentType) {
        $scope.widget.handleroptions.referencedContentType = $scope.referenced.name;
      }
    });
  }
]).run([
  'DataHandlers',
  function (DataHandlers) {
    DataHandlers.registerTemplateOnHandler('Content', 'widget/datahandler/Content.tpl.html');
    DataHandlers.registerTemplateOnHandler('Bundle', 'widget/datahandler/Bundle.tpl.html');
    DataHandlers.registerTemplateOnHandler('Reference', 'widget/datahandler/Reference.tpl.html');
  }
]);
;;angular.module('core9Dashboard.widget', [
  'ui.router',
  'core9Dashboard.widget.datahandlers',
  'core9Dashboard.config',
  'core9Dashboard.menu',
  'core9.formgenerator',
  'ui.codemirror'
]).config([
  '$stateProvider',
  function ($stateProvider) {
    $stateProvider.state('widgets', {
      url: '/config/widgets',
      views: {
        'main': {
          controller: 'ConfigWidgetListCtrl',
          templateUrl: 'widget/widgetlist.tpl.html'
        }
      },
      data: {
        pageTitle: 'Widgets',
        sidebar: 'config',
        context: 'widgets'
      }
    }).state('widgetsitem', {
      url: '/config/widgets/:id',
      views: {
        'main': {
          controller: 'ConfigWidgetCtrl',
          templateUrl: 'widget/widget.tpl.html'
        }
      },
      data: {
        pageTitle: 'Widgets',
        sidebar: 'config',
        context: 'widgets'
      }
    });
  }
]).controller('ConfigWidgetListCtrl', [
  '$scope',
  '$http',
  '$state',
  'ConfigFactory',
  function ($scope, $http, $state, ConfigFactory) {
    $scope.widgetFolder = '';
    function putWidgetInFolder(widget, target) {
      var folderIndex = widget.name.indexOf('/');
      if (folderIndex === -1) {
        if (target.widgets === undefined) {
          target.widgets = [];
        }
        target.widgets.push(widget);
      } else {
        if (target.folders === undefined) {
          target.folders = {};
        }
        var folderName = '/' + widget.name.substring(0, folderIndex);
        if (target.folders[folderName] === undefined) {
          target.folders[folderName] = {};
        }
        widget.name = widget.name.substring(folderIndex + 1);
        putWidgetInFolder(widget, target.folders[folderName]);
      }
    }
    $scope.handleWidgetData = function (data) {
      $scope.widgets = [];
      var l = data.length;
      for (var n = 0; n < l; n++) {
        putWidgetInFolder(data[n], $scope.widgets);
      }
      $scope.widgetList = $scope.widgets;
    };
    ConfigFactory.query({ configtype: 'widget' }, $scope.handleWidgetData);
    $scope.switchTo = function (folder) {
      if (folder === '..') {
        $scope.widgetFolder = $scope.widgetFolder.substring(0, $scope.widgetFolder.lastIndexOf('/'));
      } else {
        $scope.widgetFolder += folder;
      }
      if ($scope.widgetFolder === '') {
        $scope.widgetList = $scope.widgets;
      } else {
        var folders = $scope.widgetFolder.split('/');
        for (var n = 0; n < folders.length; n++) {
          if (folders[n] === '') {
            $scope.widgetList = $scope.widgets;
          } else {
            $scope.widgetList = $scope.widgetList.folders['/' + folders[n]];
          }
        }
      }
    };
    $scope.add = function (newName) {
      var widget = new ConfigFactory({ configtype: 'widget' });
      if ($scope.widgetFolder === '' || $scope.widgetFolder === '/') {
        widget.name = newName;
      } else {
        widget.name = $scope.widgetFolder.substring(1) + '/' + newName;
      }
      widget.handleroptions = {};
      widget.$save(function (data) {
        $scope.widgets.push(data);
        $state.go('widgetsitem', { id: data._id });
      });
    };
    $scope.refresh = function () {
      $http.post('/admin/widget').success(function () {
        alert('reloaded');
      }).error(function (data) {
        $scope.$emit('$error', data.error);
      });
    };
    $scope.edit = function (widget) {
      $state.go('widgetsitem', { id: widget._id });
    };
    $scope.remove = function (widget) {
      widget.$remove(function (data) {
        ConfigFactory.query({ configtype: 'widget' }, $scope.handleWidgetData);
        $scope.refresh();
      });
    };
  }
]).controller('ConfigWidgetCtrl', [
  '$scope',
  '$state',
  '$http',
  'ConfigFactory',
  '$stateParams',
  'DataHandlers',
  function ($scope, $state, $http, ConfigFactory, $stateParams, DataHandlers) {
    $scope.widget = ConfigFactory.get({
      configtype: 'widget',
      id: $stateParams.id
    });
    $scope.editorOptions = {
      mode: 'htmlmixed',
      fullScreen: false,
      smartIndent: false,
      lineWrapping: true,
      lineNumbers: true
    };
    DataHandlers.retrieveDataHandlers().then(function (data) {
      $scope.datahandlers = data;
    });
    $scope.save = function () {
      $scope.widget.$update(function () {
        $http.post('/admin/widget').success(function () {
          alert('reloaded');
        }).error(function (data) {
          $scope.$emit('$error', data.error);
        });
      });
    };
    $scope.generateBoilerplate = function () {
      var index = $scope.widget.templateName.lastIndexOf('.');
      var namespace = $scope.widget.templateName.substring(0, index);
      var template = $scope.widget.templateName.substring(index);
      $scope.widget.template = '{namespace ' + namespace + '}\n\n/**\n *\n */\n{template ' + template + '}\nBody\n{/template}\n';
    };
  }
]).run([
  'MenuService',
  function (MenuService) {
    MenuService.add('config', {
      title: 'Widgets',
      weight: 200,
      link: 'widgets'
    });
    MenuService.add('widgets', {
      title: 'Refresh',
      weight: 0,
      template: '<a href="" ng-controller="ConfigWidgetListCtrl" ng-click="refresh()">Refresh widgets</a>'
    });
  }
]);
;