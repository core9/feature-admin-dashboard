angular.module('core9Dashboard.files.feature', [
  'ui.bootstrap',
  'core9Dashboard.files'
]).controller('FeatureProcessorFilesCtrl', [
  '$scope',
  '$modal',
  function ($scope, $modal) {
    $scope.add = function () {
      var modalInstance = $modal.open({
          templateUrl: 'files/featureprocessor/processor.modal.tpl.html',
          controller: 'FeatureProcessorFilesModalCtrl',
          resolve: {
            selected: function () {
              return $scope.$parent.selected;
            }
          }
        });
    };
  }
]).controller('FeatureProcessorFilesModalCtrl', [
  '$scope',
  '$modalInstance',
  'FileFactory',
  'selected',
  function ($scope, $modalInstance, FileFactory, selected) {
    $scope.folder = '/';
    $scope.files = FileFactory.query({ folder: $scope.folder });
    $scope.switchTo = function (newFolder) {
      var folder = '/';
      if (newFolder === '/') {
        var index = $scope.folder.substring(0, $scope.folder.length - 1).lastIndexOf('/');
        folder = $scope.folder.substring(0, index) + newFolder;
      } else {
        folder = $scope.folder + newFolder + '/';
      }
      $scope.folder = folder;
    };
    $scope.$watch('folder', function () {
      if ($scope.folder !== undefined) {
        $scope.files = FileFactory.query({ folder: $scope.folder });
      }
    });
    $scope.isSelected = function (fileid) {
      for (var i = 0; i < selected.length; i++) {
        if (selected[i].id === fileid) {
          if (selected[i].remove === undefined) {
            return true;
          }
        }
      }
      return false;
    };
    $scope.select = function (file) {
      var deleted = false;
      for (var i = 0; i < selected.length; i++) {
        if (selected[i].id === file._id) {
          deleted = true;
          selected[i].remove = true;
        }
      }
      if (!deleted) {
        selected.push({
          id: file._id,
          entry: file
        });
      }
    };
    $scope.ok = function () {
      $modalInstance.close();
    };
  }
]);
;;angular.module('core9Dashboard.files', [
  'ui.router',
  'ui.bootstrap',
  'ngResource',
  'angularFileUpload',
  'core9Dashboard.menu',
  'ui.codemirror'
]).factory('FileFactory', [
  '$resource',
  function ($resource) {
    return $resource('/admin/files/:fileid', { fileid: '@_id' }, { update: { method: 'PUT' } });
  }
]).factory('FileViewer', [
  '$templateCache',
  function ($templateCache) {
    var fileViewers = {};
    var contentTypes = {};
    function FileViewer(config) {
      angular.copy(config, this);
    }
    FileViewer.get = function (name) {
      return new FileViewer(fileViewers[name]);
    };
    FileViewer.getForContentType = function (contentType) {
      console.log(contentType);
      return fileViewers[contentTypes[contentType]];
    };
    FileViewer.getAll = function () {
      var keys = [];
      for (var key in fileViewers) {
        keys.push(key);
      }
      return keys;
    };
    FileViewer.prototype['addContentType'] = function (contentType) {
      if (contentType instanceof Array) {
        for (var n = 0; n < contentType.length; n++) {
          contentTypes[contentType[n]] = this.name;
        }
      } else {
        contentTypes[contentType] = this.name;
      }
      return this;
    };
    FileViewer.prototype['save'] = function () {
      fileViewers[this.name] = this;
      return fileViewers[this.name];
    };
    FileViewer.prototype['render'] = function () {
      return $templateCache.get(this.template);
    };
    return FileViewer;
  }
]).config([
  '$stateProvider',
  function ($stateProvider) {
    $stateProvider.state('files', {
      url: '/config/files',
      views: {
        'main': {
          controller: 'FilesCtrl',
          templateUrl: 'files/files.tpl.html'
        }
      },
      data: { pageTitle: 'Files' }
    }).state('fileedit', {
      url: '/config/files/:id',
      views: {
        'main': {
          controller: 'EditFileCtrl',
          templateUrl: 'files/edit.tpl.html'
        }
      },
      data: { pageTitle: 'Files' }
    });
  }
]).controller('FilesCtrl', [
  '$scope',
  '$state',
  '$location',
  'FileFactory',
  function ($scope, $state, $location, FileFactory) {
    var dir = $location.search().dir;
    if (dir !== undefined && dir !== null) {
      $scope.folder = dir;
    } else {
      $scope.folder = '/';
    }
    $scope.files = FileFactory.query({ folder: $scope.folder });
    $scope.addFile = function () {
      var file = new FileFactory();
      file.filename = 'ReplaceMe';
      file.metadata = {
        folder: $scope.folder,
        type: 'File'
      };
      file.$save(function (data) {
        $scope.files.push(data);
        $state.go('fileedit', { id: data._id });
      });
    };
    $scope.switchTo = function (newFolder) {
      var folder = '/';
      if (newFolder === '/') {
        var index = $scope.folder.substring(0, $scope.folder.length - 1).lastIndexOf('/');
        folder = $scope.folder.substring(0, index) + newFolder;
      } else {
        folder = $scope.folder + newFolder + '/';
      }
      $scope.folder = folder;
    };
    $scope.update = function () {
      $scope.files = FileFactory.query({ folder: $scope.folder });
    };
    $scope.remove = function (file) {
      file.$remove(function () {
        $scope.update();
      });
    };
    $scope.$watch('folder', function () {
      if ($scope.folder !== undefined) {
        $location.search('dir', $scope.folder);
        $scope.update();
      }
    });
  }
]).controller('EditFileCtrl', [
  '$scope',
  '$location',
  'FileFactory',
  '$stateParams',
  'FileViewer',
  function ($scope, $location, FileFactory, $stateParams, FileViewer) {
    $scope.mimeTypes = {
      'txt': 'text/plain',
      'css': 'text/css',
      'less': 'text/less',
      'jpg': 'image/jpeg',
      'dir': 'inode/directory'
    };
    $scope.file = FileFactory.get({ fileid: $stateParams.id });
    $scope.types = [
      'Directory',
      'File'
    ];
    $scope.save = function () {
      $scope.file.$update(function () {
        $scope.back();
      });
    };
    $scope.$watch('file.metadata.type', function (newValue, oldValue) {
      if (newValue === 'Directory') {
        $scope.file.contentType = 'inode/directory';
      }
    });
    $scope.$watch('file.filename', function (newValue, oldValue) {
      if (newValue !== undefined && oldValue !== undefined && $scope.file.metadata.type === 'File') {
        var extension = newValue.substring(newValue.lastIndexOf('.') + 1);
        if ($scope.mimeTypes[extension] !== undefined) {
          $scope.file.contentType = $scope.mimeTypes[extension];
        }
      }
    });
    $scope.back = function () {
      $location.path('/config/files').search('dir', $scope.file.metadata.folder);
    };
  }
]).directive('cnFileEditor', [
  'FileViewer',
  '$compile',
  function (FileViewer, $compile) {
    return {
      replace: true,
      scope: {
        filename: '@',
        filetype: '='
      },
      link: function (scope, element, attrs) {
        scope.$watch('filetype', function (newValue, oldValue) {
          element.html('');
          $compile(element.contents())(scope);
          if (newValue !== undefined) {
            element.html(FileViewer.getForContentType(scope.filetype).render());
            $compile(element.contents())(scope);
          }
        });
      }
    };
  }
]).controller('FileUploadCtrl', [
  '$scope',
  '$upload',
  'FileFactory',
  function ($scope, $upload, FileFactory) {
    var progress = function (evt) {
      console.log('percent: ' + parseInt(100 * evt.loaded / evt.total));
    };
    var success = function (data, status, headers, config) {
      $scope.$parent.files = FileFactory.query({ folder: $scope.$parent.folder });
    };
    $scope.onFileSelect = function ($files) {
      for (var i = 0; i < $files.length; i++) {
        var file = $files[i];
        $scope.upload = $upload.upload({
          url: 'admin/files',
          file: file,
          fileFormDataName: $scope.$parent.folder
        }).progress(progress).success(success);
      }
    };
  }
]).controller('CoreLessController', [
  '$scope',
  '$http',
  function ($scope, $http) {
    $scope.editorOptions = {
      mode: 'less',
      fullScreen: false,
      lineWrapping: true,
      lineNumbers: true,
      onLoad: function (editor) {
        $http.get($scope.filename).success(function (data) {
          $scope.fileContents = data;
        });
      }
    };
    $scope.save = function () {
      $http.put($scope.filename, { content: $scope.fileContents }).error(function () {
        alert('Failed, see output in backend console.');
      });
    };
  }
]).controller('CoreTextController', [
  '$scope',
  '$http',
  function ($scope, $http) {
    $scope.editorOptions = {
      fullScreen: false,
      lineWrapping: true,
      lineNumbers: true,
      onLoad: function (editor) {
        $http.get($scope.filename).success(function (data) {
          $scope.fileContents = data;
        });
      }
    };
    $scope.save = function () {
      $http.put($scope.filename, { content: $scope.fileContents }).error(function () {
        alert('Failed, see output in backend console.');
      });
    };
  }
]).controller('coreFileSelectorCtrl', [
  '$scope',
  '$modal',
  function ($scope, $modal) {
    $scope.browse = function () {
      var modalInstance = $modal.open({
          templateUrl: 'files/field/file.selector.tpl.html',
          controller: 'coreFileSelectorBrowserCtrl',
          resolve: {
            folder: function () {
              return $scope.options.filepath !== null ? $scope.options.filepath : '/';
            }
          }
        });
      modalInstance.result.then(function (selected) {
        if (selected !== undefined) {
          $scope.$parent.data = '/static' + selected;
        }
      });
    };
  }
]).controller('coreFileSelectorBrowserCtrl', [
  '$scope',
  '$modalInstance',
  'folder',
  'FileFactory',
  function ($scope, $modalInstance, folder, FileFactory) {
    $scope.folder = folder;
    $scope.files = FileFactory.query({ folder: $scope.folder });
    $scope.switchTo = function (newFolder) {
      var folder = '/';
      if (newFolder === '/') {
        var index = $scope.folder.substring(0, $scope.folder.length - 1).lastIndexOf('/');
        folder = $scope.folder.substring(0, index) + newFolder;
      } else {
        folder = $scope.folder + newFolder + '/';
      }
      $scope.folder = folder;
    };
    $scope.select = function (file) {
      $scope.selected = file;
    };
    $scope.ok = function () {
      if ($scope.selected !== undefined) {
        $modalInstance.close($scope.folder + $scope.selected.filename);
      } else {
        $scope.cancel();
      }
    };
    $scope.cancel = function () {
      $modalInstance.close();
    };
    $scope.$watch('folder', function () {
      if ($scope.folder !== undefined) {
        $scope.files = FileFactory.query({ folder: $scope.folder });
      }
    });
  }
]).run([
  'MenuService',
  'FileViewer',
  'FieldConfig',
  function (MenuService, FileViewer, FieldConfig) {
    MenuService.add('config', {
      title: 'Files',
      weight: 150,
      link: '/config/files'
    });
    new FileViewer({
      name: 'image',
      template: 'files/viewer/image.tpl.html'
    }).addContentType([
      'image/bmp',
      'image/cis-cod',
      'image/gif',
      'image/ief',
      'image/jpeg',
      'image/jpeg',
      'image/jpeg',
      'image/pipeg',
      'image/svg+xml',
      'image/tiff',
      'image/tiff',
      'image/x-cmu-raster',
      'image/x-cmx',
      'image/x-icon',
      'image/x-portable-anymap',
      'image/x-portable-bitmap',
      'image/x-portable-graymap',
      'image/x-portable-pixmap',
      'image/x-rgb',
      'image/x-xbitmap',
      'image/x-xpixmap',
      'image/x-xwindowdump'
    ]).save();
    new FileViewer({
      name: 'less',
      template: 'files/viewer/less.tpl.html'
    }).addContentType([
      'text/css',
      'text/less'
    ]).save();
    new FileViewer({
      name: 'text',
      template: 'files/viewer/text.tpl.html'
    }).addContentType(['text/plain']).save();
    new FieldConfig({ type: 'file' }).addWidget('file', {
      template: 'files/field/file.tpl.html',
      config: 'files/field/file.config.tpl.html'
    }).save();
  }
]);
;;angular.module('core9Dashboard.filesmanager', [
  'core9Dashboard.files',
  'core9Dashboard.files.feature',
  'templates-plugin-files-manager'
]);
;
angular.module('core9Dashboard.admin.dashboard').requires.push('core9Dashboard.filesmanager');;angular.module('templates-plugin-files-manager-admin', [
  'files/edit.tpl.html',
  'files/featureprocessor/processor.modal.tpl.html',
  'files/featureprocessor/processor.tpl.html',
  'files/field/file.config.tpl.html',
  'files/field/file.selector.tpl.html',
  'files/field/file.tpl.html',
  'files/files.tpl.html',
  'files/viewer/image.tpl.html',
  'files/viewer/less.tpl.html',
  'files/viewer/text.tpl.html'
]);
angular.module('files/edit.tpl.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put('files/edit.tpl.html', '<div class="page-header">\n' + '\t<h1>File <small>{{file.filename}}</small></h1>\n' + '\t<fieldset>\n' + '\t\t<legend>File properties</legend>\n' + '\t\t<div class="input-group">\n' + '\t\t\t<span class="input-group-addon">Type</span>\n' + '\t\t\t<button type="button" class="btn btn-default form-control dropdown-toggle">{{file.metadata.type}}<span class="caret"></span>\n' + '\t\t\t</button>\n' + '\t\t\t<ul class="dropdown-menu selectbox">\n' + '\t\t\t\t<li ng-repeat="type in types"><a ng-click="file.metadata.type = type">{{type}}</a></li>\n' + '\t\t\t</ul>\n' + '\t\t</div>\n' + '\t\t<div class="input-group">\n' + '\t\t\t<span class="input-group-addon">Name</span>\n' + '\t\t\t<input type="text" class="form-control" ng-model="file.filename" />\n' + '\t\t</div>\n' + '\t\t<div class="input-group">\n' + '\t\t\t<span class="input-group-addon">Content Type</span>\n' + '\t\t\t<input type="text" class="form-control" ng-model="file.contentType" />\n' + '\t\t</div>\n' + '\t\t<fieldset>\n' + '\t\t\t<legend ng-click="showPreview = !showPreview">File preview</legend>\n' + '\t\t\t<div ng-if="showPreview">\n' + '\t\t\t\t<div cn-file-editor filename="/admin/files/{{file._id}}?contents" filetype="file.contentType" />\n' + '\t\t\t</div>\n' + '\t\t<fieldset>\n' + '\t\t\t<legend>File actions</legend>\n' + '\t\t\t<button class="btn btn-success" ng-click="save()">Save</button>\n' + '\t\t</fieldset>\n' + '\t</fieldset>\n' + '</div>');
  }
]);
angular.module('files/featureprocessor/processor.modal.tpl.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put('files/featureprocessor/processor.modal.tpl.html', '<div>\n' + '  <div class="modal-header">\n' + '    <h3>Select a file</h3>\n' + '  </div>\n' + '  <div class="modal-body">\n' + '    <fieldset>\n' + '      <legend>Folder: {{folder}}</legend>\n' + '      <table class="table table-striped">\n' + '        <tr>\n' + '          <th>Filename</th>\n' + '          <th>Content Type</th>\n' + '        </tr>\n' + '        <tr ng-show="folder !== \'/\'">\n' + '          <td><a ng-click="switchTo(\'/\')">..</td>\n' + '          <td></td>\n' + '        </tr>\n' + '        <tr ng-repeat="file in files| filter:{ contentType: \'inode/directory\'}" ng-click="switchTo(file.filename)">\n' + '          <td>{{file.filename}}</td>\n' + '          <td>{{file.contentType}}</td>\n' + '        </tr>\n' + '        <tr ng-repeat="file in files| filter:{ contentType: \'!inode/directory\'}" ng-click="select(file)">\n' + '          <td ng-class="{\'bg-success\': isSelected(file._id)}">{{file.filename}}</td>\n' + '          <td ng-class="{\'bg-success\': isSelected(file._id)}">{{file.contentType}}</td>\n' + '        </tr>\n' + '      </table>\n' + '    </fieldset>\n' + '  </div>\n' + '  <div class="modal-footer">\n' + '    <button class="btn btn-primary" ng-click="ok()">OK</button>\n' + '    <button class="btn btn-warning" ng-click="cancel()">Cancel</button>\n' + '  </div>\n' + '</div>');
  }
]);
angular.module('files/featureprocessor/processor.tpl.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put('files/featureprocessor/processor.tpl.html', '<div ng-controller="FeatureProcessorFilesCtrl">\n' + '\t<button class="btn btn-success" ng-click="add()" style="width: 100%">Add files</button>\n' + '</div>');
  }
]);
angular.module('files/field/file.config.tpl.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put('files/field/file.config.tpl.html', '<div>\n' + '\t<label>Standard filepath (optional)</label>\n' + '\t<input type="text" placeholder="Filepath (e.g. /images)" ng-model="data.filepath" />\n' + '</div>');
  }
]);
angular.module('files/field/file.selector.tpl.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put('files/field/file.selector.tpl.html', '<div>\n' + '  <div class="modal-header">\n' + '    <h3>Select a file</h3>\n' + '  </div>\n' + '  <div class="modal-body">\n' + '    <fieldset>\n' + '      <legend>Folder: {{folder}}</legend>\n' + '      <table class="table table-striped">\n' + '        <tr>\n' + '          <th>Filename</th>\n' + '          <th>Content Type</th>\n' + '        </tr>\n' + '        <tr ng-show="folder !== \'/\'">\n' + '          <td><a ng-click="switchTo(\'/\')">..</td>\n' + '          <td></td>\n' + '        </tr>\n' + '        <tr ng-repeat="file in files| filter:{ contentType: \'inode/directory\'}" ng-click="switchTo(file.filename)">\n' + '          <td>{{file.filename}}</td>\n' + '          <td>{{file.contentType}}</td>\n' + '        </tr>\n' + '        <tr ng-repeat="file in files| filter:{ contentType: \'!inode/directory\'}" ng-click="select(file)">\n' + '          <td ng-class="{success: selected == file}">{{file.filename}}</td>\n' + '          <td ng-class="{success: selected == file}">{{file.contentType}}</td>\n' + '        </tr>\n' + '      </table>\n' + '    </fieldset>\n' + '  </div>\n' + '  <div class="modal-footer">\n' + '    <button class="btn btn-primary" ng-click="ok()">OK</button>\n' + '    <button class="btn btn-warning" ng-click="cancel()">Cancel</button>\n' + '  </div>\n' + '</div>');
  }
]);
angular.module('files/field/file.tpl.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put('files/field/file.tpl.html', '<div class="input-group" ng-controller="coreFileSelectorCtrl">\n' + '\t<span class="input-group-addon">{{options.label}}</span>\n' + '\t<input type="text" class="form-control" ng-model="data" />\n' + '\t<span class="input-group-addon" ng-click="browse()">Browse</span>\n' + '</div>');
  }
]);
angular.module('files/files.tpl.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put('files/files.tpl.html', '<div class="page-header">\n' + '  <h1>Files <small><i class="icon-double-angle-right"></i> manage your files</small></h1>\n' + '  <fieldset>\n' + '    <legend>Actions</legend>\n' + '    <div>\n' + '      <div ng-controller="FileUploadCtrl">\n' + '        <div ng-file-drop="onFileSelect($files)" ng-file-drag-over-class="bg-success" class="well text-center" ng-show="dropSupported">\n' + '          <p>Drop files here or</p>\n' + '          <button class="btn btn-success" ng-click="addFile()"><i class="fa fa-floppy-o"></i> Create new file</button>\n' + '        </div>\n' + '        <div ng-file-drop-available="dropSupported=true" ng-show="!dropSupported">HTML5 Drop File is not supported!</div>\n' + '      </div>\n' + '    </div>\n' + '  </fieldset>\n' + '  <fieldset>\n' + '    <legend>Folder: {{folder}}</legend>\n' + '    <table class="table table-striped">\n' + '      <tr>\n' + '        <th>Filename</th>\n' + '        <th>Content Type</th>\n' + '        <th>Actions</th>\n' + '      </tr>\n' + '      <tr ng-show="folder !== \'/\'">\n' + '        <td><a ng-click="switchTo(\'/\')">..</td>\n' + '        <td></td>\n' + '        <td></td>\n' + '      </tr>\n' + '      <tr ng-repeat="file in files| filter:{ contentType: \'inode/directory\'}">\n' + '        <td><a ng-click="switchTo(file.filename)">{{file.filename}}</a></td>\n' + '        <td>{{file.contentType}}</td>\n' + '        <td>\n' + '          <a class="btn btn-warning" href="#/config/files/{{file._id}}"><i class="fa fa-pencil"></i></button>\n' + '        </td>\n' + '      </tr>\n' + '      <tr ng-repeat="file in files| filter:{ contentType: \'!inode/directory\'}">\n' + '        <td><a href="#/config/files/{{file._id}}">{{file.filename}}</a></td>\n' + '        <td>{{file.contentType}}</td>\n' + '        <td>\n' + '          <a class="btn btn-warning" href="#/config/files/{{file._id}}"><i class="fa fa-pencil"></i></a>\n' + '          <button class="btn btn-danger" ng-click="remove(file)"><i class="fa fa-trash-o"></i></button>\n' + '        </td>\n' + '      </tr>\n' + '    </table>\n' + '  </fieldset>\n' + '</div>');
  }
]);
angular.module('files/viewer/image.tpl.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put('files/viewer/image.tpl.html', '<img src="{{filename}}"></img>');
  }
]);
angular.module('files/viewer/less.tpl.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put('files/viewer/less.tpl.html', '<div ng-controller="CoreLessController">\n' + '\t<div ui-codemirror="editorOptions" name="fileEditor" ng-model="fileContents"></div>\n' + '\t<button class="btn btn-success" ng-click="save()">Save contents</button>\n' + '</div>');
  }
]);
angular.module('files/viewer/text.tpl.html', []).run([
  '$templateCache',
  function ($templateCache) {
    $templateCache.put('files/viewer/text.tpl.html', '<div ng-controller="CoreTextController">\n' + '\t<div ui-codemirror="editorOptions" name="fileEditor" ng-model="fileContents"></div>\n' + '\t<button class="btn btn-success" ng-click="save()">Save contents</button>\n' + '</div>');
  }
]);